// @mixin item-text-colors() {
// 	@each $name, $text-color in $item-colors {
// 		@include themify-custom('dark') {
// 			&.#{$name} {
// 				color: lighten(themed($name), 7.5%);
// 			}
// 		}
// 		@include themify-custom('light') {
// 			&.#{$name} {
// 				color: darken(themed($name), 7.5%);
// 			}
// 		}
// 	}
// }

@mixin themify($themes: $themes) {
	@each $theme, $map in $themes {
		.theme-#{$theme} & {
			$theme-map: () !global;
			@each $key, $submap in $map {
				$value: map-get(map-get($themes, $theme), '#{$key}');
				$theme-map: map-merge($theme-map, ($key: $value)) !global;
			}
			@content;
			$theme-map: null !global;
		}
	}
}

@mixin themify-custom($theme) {
	$current-theme: map-get($map: $themes, $key: $theme);
	.theme-#{$theme} & {
		$theme-map: () !global;
		@each $key, $submap in $current-theme {
			$value: map-get($current-theme, '#{$key}');
			$theme-map: map-merge($theme-map, ($key: $value)) !global;
		}
		@content;
		$theme-map: null !global;
	}
}

@mixin range-color($name) {
	// &.#{$name} {
	// 	@include themify {
	// 		$thumb: darken(themed($name), 7.5%);
	// 		$thumb-focus: darken(themed($name), 7.5%);
	// 		$track-focus: themed($name);

	// 		&::-webkit-slider-thumb {
	// 			background: $thumb;
	// 		}
	// 		&::-moz-range-thumb {
	// 			background: $thumb;
	// 		}
	// 		&::-ms-thumb {
	// 			background: $thumb;
	// 		}
	// 		&::-webkit-slider-runnable-track {
	// 			background: themed('range-bg');
	// 		}
	// 		&::-moz-range-track {
	// 			background: themed('range-bg');
	// 		}
	// 		&::-ms-fill-lower {
	// 			background: themed('range-bg');
	// 		}
	// 		&::-ms-fill-upper {
	// 			background: themed('range-bg');
	// 		}

	// 		&:hover {
	// 			&::-webkit-slider-runnable-track {
	// 				background: $track-focus;
	// 			}
	// 			&::-moz-range-track {
	// 				background: $track-focus;
	// 			}
	// 			&::-ms-fill-lower {
	// 				background: $track-focus;
	// 			}
	// 			&::-ms-fill-upper {
	// 				background: $track-focus;
	// 			}
	// 		}
	// 	}
	// }
}

// @mixin button-variant-cs($color, $background, $border-color, $hover-color, $hover-background: darken($background, 7.5%)) {
// 	color: $color;
// 	border-color: $border-color;
// 	background: $background;


// 	&:hover,
// 	&:focus {
// 		color: $hover-color;
// 		border-color: $hover-background;
// 		background: $hover-background;
// 	}

// 	&:disabled,
// 	&.disabled {
// 		color: $color;
// 		border-color: $border-color;
// 		background: $background;
// 	}
// }

// @mixin button-variant($color, $background, $hover-color, $hover-background: darken($background, 7.5%)) {
// 	color: $color;
// 	border-color: $background;
// 	background: $background;

// 	&:hover,
// 	&:focus {
// 		color: $hover-color;
// 		border-color: $hover-background;
// 		background: $hover-background;
// 	}

// 	&:disabled,
// 	&.disabled {
// 		color: $color;
// 		border-color: $background;
// 		background: $background;
// 	}
// }

// @mixin button-ghost-variant($color, $border, $hover-color, $hover-background: $border) {
// 	color: $color;
// 	border-color: $border;

// 	&:hover,
// 	&:focus {
// 		color: $hover-color;
// 		background-color: $hover-background;
// 	}

// 	&:disabled,
// 	&.disabled {
// 		color: $color;
// 		background: transparent;
// 	}
// }

@mixin scrollbar-base() {
	@include themify {
		scrollbar-width: thin;
		scrollbar-color: themed('scroll-thumb') themed('scroll-track');
		scrollbar-base-color: themed('scroll-track');
		scrollbar-highlight-color: themed('scroll-track');
		scrollbar-track-color: themed('scroll-track');
		scrollbar-face-color: themed('scroll-thumb');
		scrollbar-arrow-color: themed('scroll-thumb');
		scrollbar-shadow-color: themed('scroll-thumb');

		&::-webkit-scrollbar-thumb {
			background: themed('scroll-thumb');
			border-radius: 25px;
		}

		&::-webkit-scrollbar-track {
			background: themed('scroll-track');
			border-radius: 25px;
		}

		&::-webkit-scrollbar {
			width: 7px;
			height: 7px;
		}
	}
}

@mixin scrollbar($background: 'grey') {
	&:hover,
	&.keep {
		@include themify {
			scrollbar-face-color: themed($background);
			scrollbar-arrow-color: themed($background);
			scrollbar-shadow-color: themed($background);

			&::-webkit-scrollbar-thumb {
				background: themed($background);
			}
		}
	}
}

// @mixin create-btn($color, $text-color: #fff) {
// 	@include button-variant($text-color, $color, $text-color, darken($color, 5%));
// }

// @mixin create-outline-btn($color) {
// 	@include button-ghost-variant($color, $color, #fff, $color);
// }

// --------------------------------------- Grid System

@mixin setSize($numerator, $denominator, $subtraction: 0) {
	$final-selector: '';
	@if $subtraction > 0 {
		$computed-subtraction: $subtraction * 5;

    $counter: 0;
    @while $numerator * $counter <= 100 and $denominator * $counter <= 100 {
      $counter: $counter + 1;
			$final-selector: '#{$final-selector} &.sz#{$numerator * $counter}b#{$denominator * $counter}m#{$computed-subtraction},';
		}
		#{$final-selector} {
			$final-size: unquote('calc(#{($numerator/$denominator)*100}% - #{$computed-subtraction}px)');
			// @debug('------------------------------------');
			// @debug('$final-selector: #{$final-selector}');
			// @debug('$final-size: #{$final-size}');
			flex-basis: $final-size;
			max-width: $final-size;
		}
	} @else {
    $counter: 0;
    @while $numerator * $counter <= 100 and $denominator * $counter <= 100 {
      $counter: $counter + 1;
			$final-selector: '#{$final-selector} &.sz#{$numerator * $counter}b#{$denominator * $counter},';
		}

		#{$final-selector} {
			$final-size: unquote(($numerator/$denominator)*100 + '%');
			// @debug('------------------------------------');
			// @debug('$final-selector: #{$final-selector}');
			// @debug('$final-size: #{$final-size}');
			flex-basis: $final-size;
			max-width: $final-size;
		}
	}
}

/*
	sz50b100      >>  50% or 50/100  :: size 50 in a 100 columns grid
	sz6b12        >>  6/12           :: size 6 in a 12 columns grid
	sz1b16        >>  1/16           :: size 1 in a 16 columns grid
	sz155         >>  155px          :: value in pixels
	sz45b100m50   >>  45/100 - 50px
*/

%grid {
	@for $subtraction from 0 through 40 {
    @include setSize(1, 1, $subtraction); //100
    @include setSize(19, 20, $subtraction); //95
    @include setSize(11, 12, $subtraction);
		@include setSize(9, 10, $subtraction); //90
		@include setSize(17, 20, $subtraction); //85
		@include setSize(5, 6, $subtraction); //83
		@include setSize(4, 5, $subtraction); //80
		@include setSize(3, 4, $subtraction); //75
		@include setSize(7, 10, $subtraction); //70
		@include setSize(2, 3, $subtraction);
		@include setSize(13, 20, $subtraction); //65
		@include setSize(3, 5, $subtraction); //60
		@include setSize(7, 12, $subtraction);
		@include setSize(11, 20, $subtraction); //55
		@include setSize(1, 2, $subtraction); //50
		@include setSize(9, 20, $subtraction); //45
		@include setSize(5, 12, $subtraction);
		@include setSize(2, 5, $subtraction); //40
		@include setSize(7, 20, $subtraction); //35
		@include setSize(1, 3, $subtraction);
		@include setSize(3, 10, $subtraction); //30
		@include setSize(1, 4, $subtraction); //25
		@include setSize(1, 5, $subtraction); //20
		@include setSize(1, 6, $subtraction);
		@include setSize(3, 20, $subtraction); //15
		@include setSize(1, 7, $subtraction);
		@include setSize(1, 8, $subtraction);
		@include setSize(1, 9, $subtraction);
    @include setSize(1, 10, $subtraction); //10
    @include setSize(1, 11, $subtraction);
    @include setSize(1, 12, $subtraction);
    @include setSize(1, 13, $subtraction);
    @include setSize(1, 14, $subtraction);
    @include setSize(1, 15, $subtraction);
    @include setSize(1, 16, $subtraction);
    @include setSize(1, 17, $subtraction);
    @include setSize(1, 18, $subtraction);
    @include setSize(1, 19, $subtraction);
		@include setSize(1, 20, $subtraction); //5
	}

	&.allow-growing { flex-grow: 1; }
	&.allow-shrink { flex-shrink: 1; }
	&.disable-growing { flex-grow: 0; }
	&.disable-shrink { flex-shrink: 0; }
}

%fix-columns {
	@for $size from 1 through 60 {
		$final-size: #{$size*5};
		&.sz#{$final-size} {
			flex-basis: #{$final-size}px;
			max-width: #{$final-size}px;
		}
	}
}